教材编写存在的问题：
1.知识逻辑缺乏，段落之间是没有逻辑的拼凑，概念从百度搬移到文本中，没有认真思考和考究概念的起源、背景，非普适性价值的描述。
2.教材的项目范例目标指向不明确，形式主义严重。穿着项目学习的外套，做的是传统教学的讲授和训练。
3.Python的优势在于简洁易学易懂，目前第三方库的学习和应用都是在模仿，么有足够的中文资源来支撑。
4.对于不同地区，实验室设备配置差异会严重影响教材教学的使用，低端设备基础环境的设置方案，一般信息技术实验室基础环境配置方案，要区别对待。建立Jupyternotebook Hub是一个很好的解决方案，repl.io也是一个在线学习的实验环境。在每一台机器上安装Anaconda如此大的套件，可以发挥的作用确实很小。由于屏蔽了底层基础环境的差异和细节，在教学过程中出现的程序调试出错信息就会成为师生学习的拦路虎。人总是容易在困难面前产生畏惧感，产生畏难情绪。Python的学习并不是如人们口里所说的那么容易，上手快的往往会易学难精。
5.从命令行界面，到图形用户界面，又回归到命令行交互，这不是倒退是计算发展的必然之路。强调人机对话，人机交互，人机协同，把人的想法用类似于自然语言的命令行表示出了，是人的思维的外显。语言是思维的外显。
6.Python的教学过程实在“用中学”开展的。作为信息社会的原住民，本世纪前20年的科技应用发展为他们打好了基础。语言作为一种工具来使用。计算机程序设计语言也不例外。师生通过阅读代码（听），尝试运用有限的语句模仿程序的实现（复读），尝试改变语句中的内容进一步来解决新问题（表达），最后是形成自己的语言表达方式和方法（习得）。
7.Python教学中，结合着解析几何圆的定义，ASCII码表的打印，国标码的打印输出，这些例子会很有吸引力，可以作为课例打造。
8.Python最多再未来十年内作为基础教育的实验工具来引用，不能成为大型工程问题的解决工具。（信息技术实验室）
9.对Python的认识有两点：Python是由一位数学家发明的简洁表达工具；Python是具有“粘合”第三方库模块能力的脚本语言。
10.对于众多的Python工具，如何认识它们的功能，准确发挥它们的作用，这是作为教师首先要理解的。

# 入门篇
## 第一章 认识Python
### Python 程序设计语言基础包
从网站上下载的Python程序设计语言是一个软件包，其中包含了Python Shell, IDEL, Manuals和扩展包管理器等部件，同时自身带了若干个常用的模块，例如，sys, os, math, random等。Python Shell（外壳）是命令行交互界面，可以调试功能函数，调试程序代码段。
IDLE是Python的一个轻量级集成开发环境（IDE），具备基本的源代码编辑、运行程序、调试程序等功能。IDLE与Python Shell配合使用。
Python的扩展库存放在Python安装所在的文件夹中，具体的路径是sites-packages。
pip是Python的包管理软件，它需要在命令行环境中运行，安装新的扩展包的命令语句是 pip install <扩展包名称> [可选参数]，卸载已安装的扩展包的命令语句是 pip uninstall <扩展包名称> [可选参数]。命令语句中的扩展包名称必须使用者指定的，扩展包提供了可实现程序功能的函数代码文件和必要的帮助文档。可选参数为命令行语句提供可选的操作功能，例如，如果要从网络中下载一个合适版本的扩展包而不使用本地机器中的缓存版本，可以选择在命令行语句中加入 --no-cahce 参数。pip会直接连接互联网下载用户指定的扩展包。

### 功能更强大的Python集成开发环境
#### Eclipse、JetBrains等版本的IDE，可以提供一个具有丰富功能的编程环境。当然会提供一个包管理的功能。
没有安装Python，可以安装IDE吗？
#### 个性化配置的开发环境
Sublime, Visual Code, Notepad++等，可以与Python基础包配合使用，实现个性化配置的程序开发环境方案。
#### Jupyternotebook
是一个基于浏览器的WCLI（B/S结构），它把Python视为是一个后端的Web服务器（Web Server），通过Web Browser访问与之交互。交互可以是程序代码以行命令调试，类似于IDLE，也可以通过终端模式交互实现包管理等功能。
#### Anaconda
一个集成了科学计算、数据处理分析和可视化表的等众多扩展包的Python程序设计语言包。

## 第二章 Python程序设计语言


## 第三章 Python的常用扩展库

## 教学篇（教师）


## 项目篇（学生）

